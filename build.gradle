import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id "org.openapi.generator" version "6.6.0" // OpenAPI Generator Gradle Plugin
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // OpenAPI Generator required dependencies (
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation('org.openapitools:openapi-generator:6.6.0') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // )

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

def getPropertiesValue(String key) {
    def properties = new Properties()
    file("src/main/resources/application.properties").withInputStream { properties.load(it) }

    return properties.getProperty(key)
}

// OpenAPI Generator Task
tasks.register('openApiGenerateRestController', GenerateTask) {
    generatorName.set("spring")
    verbose.set(true)
    inputSpec.set("$rootDir/src/main/resources/static${getPropertiesValue("springdoc.swagger-ui.urls[0].url")}")
    outputDir.set("$buildDir/generate-resources")
    apiPackage.set("com.example.openapigen.api")
    invokerPackage.set("com.example.openapigen.invoker")
    modelPackage.set("com.example.openapigen.model")
    configOptions.set([
            dateLibrary         : "java8",
            library             : "spring-boot", //spring-boot, spring-mvc, spring-cloud
            interfaceOnly       : "true",
            unhandledException  : "true",
            useSpringBoot3      : "true",
            useSpringController : "true",
            skipDefaultInterface: "true"
    ])
}

// OpenAPI Generator Task
tasks.register('openApiGenerateFeignClient', GenerateTask) {
    generatorName.set("spring")
    verbose.set(true)
    inputSpec.set("$rootDir/src/main/resources/static${getPropertiesValue("springdoc.swagger-ui.urls[1].url")}")
    outputDir.set("$buildDir/generate-resources")
    apiPackage.set("com.example.openapigen.fengin")
    invokerPackage.set("com.example.openapigen.invoker")
    modelPackage.set("com.example.openapigen.model")
    configOptions.set([
            dateLibrary        : "java8",
            library            : "spring-cloud", //spring-boot, spring-mvc, spring-cloud
            interfaceOnly      : "true",
            unhandledException : "true",
            useSpringBoot3     : "true",
    ])
}

// OpenAPI Generator Tasks dependsOn compileJava
compileJava.dependsOn tasks.named("openApiGenerateRestController")
compileJava.dependsOn tasks.named("openApiGenerateFeignClient")

// source location for generated by OpenAPI Generator
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "$buildDir/generate-resources/src/main/java"]
        }
    }
}
